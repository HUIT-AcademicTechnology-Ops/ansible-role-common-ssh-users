---
# Create user, group, directory, and authorized_keys
- name: Make sure group exists with same name as user
  group:
    name: "{{ ssh_user.name }}"
    state: present

- name: Make sure users exist while setting primary group to same name
  user:
    name: "{{ ssh_user.name }}"
    group: "{{ ssh_user.name }}"
    shell: "{{ ssh_user.login_shell|d(ssh_users_login_shell) }}"

- name: Build up set of authorized keys obtained from a github server
  uri:
    url: "https://{{ ssh_users_github_domain }}/{{ item }}.keys"
    return_content: yes
  register: github_pubkeys
  with_items: "{{ ssh_user.github_authorized_keys|d([]) }}"
  # Don't fail if a username is not present in github (404)
  failed_when: "github_pubkeys.status not in (404, 200)"
  tags: debug

- set_fact: github_pubkeys_string={{ github_pubkeys.results | map(attribute='content') | join }}
  tags: debug

- name: Install authorized keys in exclusive mode
  authorized_key:
    user: "{{ ssh_user.name }}"
    key: "{{ github_pubkeys_string }}"
    exclusive: True

- name: Create directories that should be owned by user
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ssh_user.name }}"
    group: "{{ ssh_user.name }}"
  with_items: "{{ ssh_user.dirs|d([]) }}"
